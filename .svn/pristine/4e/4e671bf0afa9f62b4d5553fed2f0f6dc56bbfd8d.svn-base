package com.telpo.idcheck;

import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Timer;
import java.util.TimerTask;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.google.zxing.other.BeepManager;
import com.telpo.finger.FingerPreview;
import com.telpo.finger.FingerprintPowerManager;
import com.telpo.finger.Utils;
import com.telpo.tps550.api.TelpoException;
import com.telpo.tps550.api.idcard.CountryMap;
import com.telpo.tps550.api.idcard.IdentityInfo;
import com.zkteco.android.IDReader.IDPhotoHelper;
import com.zkteco.android.IDReader.WLTService;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbEndpoint;
import android.hardware.usb.UsbInterface;
import android.hardware.usb.UsbManager;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.TransactionTooLargeException;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.view.animation.TranslateAnimation;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

public class UsbIdCardActivity extends Activity {
	static String[] nation_list = new String[] { "汉", "蒙古", "回", "藏", "维吾尔", "苗", "彝", "壮", "布依", "朝鲜", "满", "侗", "瑶",
			"白", "土家", "哈尼", "哈萨克", "傣", "黎", "傈僳", "佤", "畲", "高山", "拉祜", "水", "东乡", "纳西", "景颇", "柯尔克孜", "土", "达斡尔",
			"仫佬", "羌", "布朗", "撒拉", "毛南", "仡佬", "锡伯", "阿昌", "普米", "塔吉克", "怒", "乌孜别克", "俄罗斯", "鄂温克", "德昂", "保安", "裕固",
			"京", "塔塔尔", "独龙", "鄂伦春", "赫哲", "门巴", "珞巴", "基诺", "其他", "外国血统中国籍人士" };
	private static final String TAG = "UsbIdCardActivity";
	private static final byte[] SAM_HEADER = new byte[] { (byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0x96, 0x69 };
	private TextView idcardInfo, hint_view, def_view, test_info_view;
	private ImageView imageView1, imageView2;
	private Button getPermission, btn_read_once, btn_read_circle;
	private IdentityInfo info;
	private SoundPool soundPool;
	private Bitmap bitmap;
	private CountryMap countryMap = CountryMap.getInstance();
	private View info_view;
	private byte[] image;
	private byte[] fringerprint;
	private String fringerprintData;
	private PendingIntent mPermissionIntent;// luyq
	private static final String ACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION";
	private UsbManager mUsbManager;
	private UsbDevice idcard_reader;
	private int contentLength, imageDatalength, fplength;
	private GetIDInfoTask mAsyncTask;
	private static boolean isCardPressing = false;
	private boolean hasPermission = false;
	private boolean isUsingUsb = false;
	private boolean hasReader = false;
	private boolean isFinish = false;
	private boolean isCount = false;
	private boolean isCircle = false;
	private boolean hasCircle = false;
	private int count_time = 0;
	private int success = 0;
	private FingerPreview fingercamera;
	private Timer timer = new Timer();
	private TimerTask task;
	private static long play_time = 0;
	private Handler handler1 = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			if (isFinish) {
				return;
			}
			switch (msg.what) {
			case 1:
				mAsyncTask = new GetIDInfoTask();
				mAsyncTask.execute();
				break;
			case 2:
				String text = hint_view.getText().toString();
				int index = text.indexOf("\n");
				if (index != -1) {
					text = text.substring(0, index);
				}
				hint_view.setText(text + "\n" + getString(R.string.idcard_djs) + msg.arg1);
				break;
			case 3:
				// 超时
				imageView2.setVisibility(View.INVISIBLE);
				isCardPressing = false;
				if (handler2.hasMessages(1)) {
					handler2.removeMessages(1);
				}
				while (fingercamera.isworking)
					;
				FingerprintPowerManager.SetFingerPower(0);
				hint_view.setText(getString(R.string.idcard_qfk));
				test_info_view
						.setText(getString(R.string.idcard_cscs) + count_time + "  " + getString(R.string.idcard_cgcs)
								+ success + "  " + getString(R.string.idcard_sbcs) + (count_time - success));
				showDefaultView(getString(R.string.idcard_dqsbhcs));
				handler1.sendMessage(handler1.obtainMessage(1, ""));
				break;
			}
			super.handleMessage(msg);
		}
	};

	private Handler handler2 = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			if (isFinish) {
				Log.e("sss", "return1");
				return;
			}
			if (!isCardPressing) {
				Log.e("sss", "return2");
				return;
			}
			switch (msg.what) {
			case 1:
				imageView2.setVisibility(View.INVISIBLE);
				if (fringerprint != null) {
					fingercamera.StartCompareFeatureThread(fringerprint);
				}
				break;
			case 2:
				// Matchingsucceeded
				if (!isCount && isCircle) {
					// handler2.sendMessageDelayed(handler2.obtainMessage(1, ""), 0);
					if (handler2.hasMessages(1)) {
						handler2.removeMessages(1);
					}
					return;
				}
				imageView2.setImageBitmap(
						BitmapFactory.decodeByteArray(fingercamera.grey_bmp_buffer, 0, 256 * 360 + 1024 + 54));
				imageView2.setVisibility(View.VISIBLE);
				playSound(3);
				hint_view.setText(getString(R.string.fprint_ppcg));
				isCount = false;
				fringerprint = null;
				if(!isCircle) {
					while (fingercamera.isworking)
						;
					FingerprintPowerManager.SetFingerPower(0);
					btn_read_once.setEnabled(true);
					btn_read_circle.setEnabled(true);
				}
				break;
			case -2:
				// Matchingfailed
				if (!isCount && isCircle) {
					handler2.sendMessageDelayed(handler2.obtainMessage(1, ""), 0);
					return;
				}
				playSound(2);
				hint_view.setText(getString(R.string.fprint_ppsb));
				fringerprint = null;
				if(!isCircle) {
					while (fingercamera.isworking)
						;
					FingerprintPowerManager.SetFingerPower(0);
					btn_read_once.setEnabled(true);
					btn_read_circle.setEnabled(true);
				}else {
					handler2.sendMessageDelayed(handler2.obtainMessage(1, ""), 0);
				}
				break;
			case 3:
				// founduvcdevice
				Log.e("sss", "founduvcdevice");
				break;
			case -3:
				// notfounduvcdevice
				hint_view.setText(getString(R.string.fprint_wzwy));
				Log.e("sss", "notfounduvcdevice");
				break;
			case -13:
				// outoftime
				imageView2.setVisibility(View.INVISIBLE);
				handler2.sendMessageDelayed(handler2.obtainMessage(1, ""), 500);
				break;
			case -1:
				finish();
				break;
			}
			super.handleMessage(msg);
		}
	};

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON,
				WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);//设置窗体始终点亮
		setContentView(R.layout.idcard_usb);
		getPermission = (Button) findViewById(R.id.requestPermission);
		idcardInfo = (TextView) findViewById(R.id.showData);
		imageView1 = (ImageView) findViewById(R.id.imageView1);
		imageView2 = (ImageView) findViewById(R.id.imageView2);
		info_view = findViewById(R.id.relativeLayout);
		hint_view = (TextView) findViewById(R.id.hint_view);
		def_view = (TextView) findViewById(R.id.default_view);
		test_info_view = (TextView) findViewById(R.id.test_info_view);

		soundPool = new SoundPool(10, AudioManager.STREAM_SYSTEM, 5);
		soundPool.load(this, R.raw.read_card, 1);
		soundPool.load(this, R.raw.verify_fail, 2);
		soundPool.load(this, R.raw.verify_success, 3);
		soundPool.load(this, R.raw.please_verify, 4);

		getPermission.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				openUsbIdCard();
			}
		});

		btn_read_once = (Button) findViewById(R.id.read_once);
		btn_read_once.setVisibility(View.VISIBLE);
		btn_read_once.setEnabled(false);
		btn_read_once.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				showDefaultView("");
				btn_read_once.setEnabled(false);
				btn_read_circle.setEnabled(false);
				handler1.sendMessage(handler1.obtainMessage(1, ""));
			}
		});

		btn_read_circle = (Button) findViewById(R.id.read_circle);
		btn_read_circle.setVisibility(View.VISIBLE);
		btn_read_circle.setEnabled(false);
		btn_read_circle.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				isCircle = !isCircle;
				if (isCircle) {
					hasCircle = true;
					showDefaultView("");
					count_time = 0;
					success = 0;
					btn_read_circle.setText(getString(R.string.idcard_stop_read));
					btn_read_once.setEnabled(false);
					handler1.sendMessage(handler1.obtainMessage(1, ""));
				} else {
					btn_read_circle.setText(getString(R.string.idcard_start_read));
					btn_read_once.setEnabled(false);
					btn_read_circle.setEnabled(false);
				}
			}
		});

		mPermissionIntent = PendingIntent.getBroadcast(UsbIdCardActivity.this, 0, new Intent(ACTION_USB_PERMISSION), 0);
		IntentFilter filter = new IntentFilter();
		filter.addAction(ACTION_USB_PERMISSION);
//		filter.addAction(UsbManager.ACTION_USB_ACCESSORY_DETACHED);
//		filter.addAction(UsbManager.ACTION_USB_ACCESSORY_ATTACHED);
//		filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);
//		filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);
		registerReceiver(mReceiver, filter);
		// luyq add 20170904 end
		fingercamera = new FingerPreview(this, handler2);

		test_info_view.setText(getString(R.string.idcard_cscs) + count_time + "  " + getString(R.string.idcard_cgcs)
				+ success + "  " + getString(R.string.idcard_sbcs) + (count_time - success));
	}

	@Override
	protected void onStart() {
		// TODO Auto-generated method stub
		super.onStart();
		// beepManager = new BeepManager(this, R.raw.read_card_success);
		ShellUtils.execCommand("echo 3 > /sys/class/telpoio/power_status", false);//usb get charge
		detectUsbDeviceAttach();
		getPermission.setVisibility(View.VISIBLE);
		def_view.setText(getString(R.string.idcard_qhqqx));
		openUsbIdCard();//if has permission, button hide
		hint_view.setText("");
		isFinish = false;
	}

	@Override
	protected void onStop() {
		// TODO Auto-generated method stub
		super.onStop();
		if (handler1.hasMessages(1)) {
			handler1.removeMessages(1);
		}
		if (handler2.hasMessages(1)) {
			handler2.removeMessages(1);
		}
		ShellUtils.execCommand("echo 4 > /sys/class/telpoio/power_status", false);
		isCount = false;
		while (fingercamera.isworking)
			;
		FingerprintPowerManager.SetFingerPower(0);
		isFinish = true;
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		isCardPressing = false;
		isCount = false;
		unregisterReceiver(mReceiver);//shut down broadcastreceiver
		unregisterReceiver(mUsbReceiver);
		while (isUsingUsb)
			;
		while(fingercamera.isworking);
		fingercamera.UnInit();
	}

	private class GetIDInfoTask extends AsyncTask<Void, Integer, Boolean> {

		@Override
		protected void onPreExecute() {//before thread
			super.onPreExecute();
			info = null;
			bitmap = null;
			fringerprintData = "";
			fringerprint = null;
		}

		@Override
		protected Boolean doInBackground(Void... arg0) {//in thread

			info = checkIdCard();// luyq modify
			if (info != null) {
				if("".equals(info.getName())) {
					return false;
				}
				image = info.getHead_photo();
				fringerprint = Arrays.copyOfRange(image, imageDatalength, image.length);
				fringerprintData = getFingerInfo(fringerprint);
				return true;
			}
			return false;
		}

		@Override
		protected void onPostExecute(Boolean result) {//after thread
			super.onPostExecute(result);
			if (result) {
				// beepManager.playBeepSoundAndVibrate();
				if ("I".equals(info.getCard_type())) {
					// luyq add 20170823 澧炲姞澶栫睄韬唤璇佷俊鎭樉绀�
					idcardInfo.setText(getString(R.string.idcard_xm) + info.getName() + "\n"
							+ getString(R.string.idcard_cn_name) + info.getCn_name() + "\n" // Chinese name
							+ getString(R.string.idcard_xb) + info.getSex() + "\n" + getString(R.string.idcard_csrq)
							+ info.getBorn() + "\n" + getString(R.string.idcard_country)
							+ countryMap.getCountry(info.getCountry()) + " / " + info.getCountry() + "\n"
							+ getString(R.string.idcard_yxqx) + info.getPeriod() + "\n"
							+ getString(R.string.idcard_qzjg) + info.getApartment() + "\n"
							+ getString(R.string.idcard_sfhm) + info.getNo() + "\n"
							+ getString(R.string.idcard_version) + info.getIdcard_version() + "\n");
				} else {
					idcardInfo.setText(getString(R.string.idcard_xm) + info.getName() + "\n"
							+ getString(R.string.idcard_xb) + info.getSex() + "\n" + getString(R.string.idcard_mz)
							+ info.getNation() + "\n" + getString(R.string.idcard_csrq) + info.getBorn() + "\n"
							+ getString(R.string.idcard_dz) + info.getAddress() + "\n"
							+ getString(R.string.idcard_sfhm) + info.getNo() + "\n" + getString(R.string.idcard_qzjg)
							+ info.getApartment() + "\n" + getString(R.string.idcard_yxqx) + info.getPeriod() + "\n"
							+ getString(R.string.idcard_zwxx) + fringerprintData);
				}
				byte[] buf = new byte[WLTService.imgLength];
				if (1 == WLTService.wlt2Bmp(image, buf)) {
					imageView1.setImageBitmap(IDPhotoHelper.Bgr2Bitmap(buf));
					imageView1.setVisibility(View.VISIBLE);
				}
				showInfoView();//show another view
				isCardPressing = true;
				playSound(1);
				success++;
				if (fringerprintData == null || "".equals(fringerprintData) || fringerprint == null
						|| getString(R.string.idcard_wdqhbhzw).equals(fringerprintData.trim())) {
					// 鍏抽棴鎸囩汗浠�
					if (handler2.hasMessages(1)) {
						handler2.removeMessages(1);
					}
					while (fingercamera.isworking)
						;
					FingerprintPowerManager.SetFingerPower(0);
					hint_view.setText("");
					if (!isCount && isCircle) {
						isCount = true;
						timer = new Timer();
						TimerTask task = new TimerTask() {
							int count_down = 3;

							@Override
							public void run() {
								Message msg = new Message();
								msg.what = 2;
								msg.arg1 = count_down;
								handler1.sendMessage(msg);
								count_down--;
								if (count_down < 0 || !isCount) {
									isCount = false;
									timer.cancel();
									handler1.sendEmptyMessage(3);
								}
							}
						};
						timer.schedule(task, 0, 1000);
					}else {
						btn_read_once.setEnabled(true);
						btn_read_circle.setEnabled(true);
					}
					count_time++;
				} else {
					// 鎵撳紑鎸囩汗浠�
					count_time++;
					imageView2.setVisibility(View.INVISIBLE);
					while (fingercamera.isworking)
						;
					FingerprintPowerManager.SetFingerPower(0);
					FingerprintPowerManager.SetFingerPower(1);
					hint_view.setText(getString(R.string.fprint_qyzzw));
					//handler2.sendMessageDelayed(handler2.obtainMessage(1, ""), 0);
					playSound(4);
				}
			} else {
				if (isCircle) {
					handler1.sendMessageDelayed(handler1.obtainMessage(1, ""), 100);
				} else {
					if(!hasCircle) {
						playSound(5);
					}
					hasCircle = false;
					btn_read_once.setEnabled(true);
					btn_read_circle.setEnabled(true);
					showDefaultView("");
				}
			}
		}
	}

	private String GetFingerName(int fingerPos) {
		String fingerName = "";
		switch (fingerPos) {
		case 11:
			// 鍙虫墜鎷囨寚
			fingerName = getString(R.string.idcard_ysmz);
			break;
		case 12:
			// 鍙虫墜椋熸寚
			fingerName = getString(R.string.idcard_yssz);
			break;
		case 13:
			// 鍙虫墜涓寚
			fingerName = getString(R.string.idcard_yszz);
			break;
		case 14:
			// 鍙虫墜鐜寚
			fingerName = getString(R.string.idcard_yshz);
			break;
		case 15:
			// 鍙虫墜灏忔寚
			fingerName = getString(R.string.idcard_ysxz);
			break;
		case 16:
			// 宸︽墜鎷囨寚
			fingerName = getString(R.string.idcard_zsmz);
			break;
		case 17:
			// 宸︽墜椋熸寚
			fingerName = getString(R.string.idcard_zssz);
			break;
		case 18:
			// 宸︽墜涓寚
			fingerName = getString(R.string.idcard_zszz);
			break;
		case 19:
			// 宸︽墜鐜寚
			fingerName = getString(R.string.idcard_zshz);
			break;
		case 20:
			// 宸︽墜灏忔寚
			fingerName = getString(R.string.idcard_zsxz);
			break;
		case 97:
			// 鍙虫墜涓嶇‘瀹氭寚浣�
			fingerName = getString(R.string.idcard_ysbqdzw);
			break;
		case 98:
			// 宸︽墜涓嶇‘瀹氭寚浣�
			fingerName = getString(R.string.idcard_zsbqdzw);
			break;
		case 99:
			// 鍏朵粬涓嶇‘瀹氭寚浣�
			fingerName = getString(R.string.idcard_qtbqdzw);
			break;
		default:
			// 鎸囦綅鏈煡
			fingerName = getString(R.string.idcard_zwwz);
			break;
		}
		return fingerName;
	}

	// 绗�5瀛楄妭涓烘敞鍐岀粨鏋滀唬鐮侊紝0x01-娉ㄥ唽鎴愬姛锛�0x02--娉ㄥ唽澶辫触, 0x03--鏈敞鍐�, 0x09--鏈煡
	private String GetFingerStatus(int fingerStatus) {
		String fingerStatusName = "";
		switch (fingerStatus) {
		case 0x01:
			// 娉ㄥ唽鎴愬姛
			fingerStatusName = getString(R.string.idcard_zccg);
			break;
		case 0x02:
			// 娉ㄥ唽澶辫触
			fingerStatusName = getString(R.string.idcard_zcsb);
			break;
		case 0x03:
			// 鏈敞鍐�
			fingerStatusName = getString(R.string.idcard_wzc);
			break;
		case 0x09:
			// 娉ㄥ唽鐘舵�佹湭鐭�
			fingerStatusName = getString(R.string.idcard_zcztwz);
			break;
		default:
			// 娉ㄥ唽鐘舵�佹湭鐭�
			fingerStatusName = getString(R.string.idcard_zcztwz);
			break;
		}
		return fingerStatusName;
	}

	private String getFingerInfo(byte[] fpData) {
		// 瑙ｉ噴绗�1鏋氭寚绾癸紝鎬婚暱搴�512瀛楄妭锛岄儴鍒嗘暟鎹牸寮忥細
		// 绗�1瀛楄妭涓虹壒寰佹爣璇�'C'
		// 绗�5瀛楄妭涓烘敞鍐岀粨鏋滀唬鐮侊紝0x01-娉ㄥ唽鎴愬姛锛�0x02--娉ㄥ唽澶辫触, 0x03--鏈敞鍐�, 0x09--鏈煡
		// 绗�6瀛楄妭涓烘寚浣嶄唬鐮�
		// 绗�7瀛楄妭涓烘寚绾硅川閲忓�硷紝0x00琛ㄧず鏈煡锛�1~100琛ㄧず璐ㄩ噺鍊�
		// 绗�512瀛楄妭 crc8鍊�
		String fingerInfo = "";
		if (fpData != null && fpData.length == 1024 && fpData[0] == 'C') {
			fingerInfo = fingerInfo + GetFingerName(fpData[5]);

			if (fpData[4] == 0x01) {
				fingerInfo = fingerInfo + " " + getString(R.string.idcard_zwzl) + String.valueOf(fpData[6]);
			} else {
				fingerInfo = fingerInfo + GetFingerStatus(fpData[4]);
			}

			fingerInfo = fingerInfo + "  ";
			if (fpData[512] == 'C') {
				fingerInfo = fingerInfo + GetFingerName(fpData[512 + 5]);

				if (fpData[512 + 4] == 0x01) {
					fingerInfo = fingerInfo + " " + getString(R.string.idcard_zwzl) + String.valueOf(fpData[512 + 6]);
				} else {
					fingerInfo = fingerInfo + GetFingerStatus(fpData[512 + 4]);
				}
			}
		} else {
			fingerInfo = getString(R.string.idcard_wdqhbhzw);
		}

		return fingerInfo;
	}

	// 
	public void openUsbIdCard() {
		isUsingUsb = true;
		mUsbManager = (UsbManager) getSystemService(Context.USB_SERVICE);
		HashMap<String, UsbDevice> deviceHashMap = mUsbManager.getDeviceList();
		Iterator<UsbDevice> iterator = deviceHashMap.values().iterator();
		hasReader = false;

		while (iterator.hasNext()) {
			UsbDevice usbDevice = iterator.next();
			int pid = usbDevice.getProductId();
			int vid = usbDevice.getVendorId();

			if (pid == 0xc35a && vid == 0x0400) {
				hasReader = true;
				idcard_reader = usbDevice;
				if (mUsbManager.hasPermission(usbDevice)) {
					getPermission.setVisibility(View.INVISIBLE);
					def_view.setText(getString(R.string.idcard_hqqxcg));
					hasPermission = true;
					btn_read_circle.setEnabled(true);
					btn_read_once.setEnabled(true);
					break;
				} else {
					//get permission
					getPermission.setVisibility(View.VISIBLE);
					def_view.setText(getString(R.string.idcard_qhqqx));
					hasPermission = false;
					mUsbManager.requestPermission(usbDevice, mPermissionIntent);//guding de
				}
			}
		}
		isUsingUsb = false;
		if (!hasReader) {
			hint_view.setText(getString(R.string.idcard_wfljdkq));
			if (handler1.hasMessages(1)) {
				handler1.removeMessages(1);
			}
		}
	}

	// luyq add 20170904
	//put in request, and get result(function)
	public byte[] requestUSBDataBtn(byte[] cmd, byte[] resp) {

		if (idcard_reader != null && resp.length == 3) {

            //dont change
			UsbInterface usbInterface = idcard_reader.getInterface(0);// USBEndpoint涓鸿鍐欐暟鎹墍闇�鐨勮妭鐐�
			UsbEndpoint inEndpoint = usbInterface.getEndpoint(0); // 璇绘暟鎹妭鐐�
			UsbEndpoint outEndpoint = usbInterface.getEndpoint(1); // 鍐欐暟鎹妭鐐�
			UsbDeviceConnection connection = null;
			try {
				connection = mUsbManager.openDevice(idcard_reader);
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			if (connection == null) {
				if (handler1.hasMessages(1)) {
					handler1.removeMessages(1);
				}
				return null;
			}
			connection.claimInterface(usbInterface, true);
			int out = connection.bulkTransfer(outEndpoint, cmd, cmd.length, 3000);

			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			// 鍙戦�佹暟鎹�
			byte[] byte2 = new byte[5 * 1024];
			// 璇诲彇鏁版嵁1 涓ょ鏂规硶璇诲彇鏁版嵁
			int ret = connection.bulkTransfer(inEndpoint, byte2, byte2.length, 3000);
			for (int i = 0; i < SAM_HEADER.length; i++) {
				if (byte2[i] != SAM_HEADER[i]) {
					connection.close();
					return null;
				}
			}
			for (int i = 0; i < resp.length; i++) {
				if (byte2[SAM_HEADER.length + 2 + i] != resp[i]) {
					connection.close();
					return null;
				}
			}
			connection.close();
			return Arrays.copyOfRange(byte2, SAM_HEADER.length + 5, ret - 1);//=java's substring
		}
		return null;
	}

	private IdentityInfo checkIdCard() {
		byte[] cmd_find_card = new byte[] { (byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0x96, 0x69, 0x00, 0x03, 0x20,
				0x01, 0x22 };
		byte[] ret = requestUSBDataBtn(cmd_find_card, new byte[] { 0x00, 0x00, (byte) 0x9F });
		if (ret == null) {
			return null;
		}
		byte[] cmd_select_card = new byte[] { (byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0x96, 0x69, 0x00, 0x03,
				0x20, 0x02, 0x21 };
		ret = requestUSBDataBtn(cmd_select_card, new byte[] { 0x00, 0x00, (byte) 0x90 });
		if (ret == null) {
			return null;
		}
		byte[] cmd_read_card = new byte[] { (byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0x96, 0x69, 0x00, 0x03, 0x30,
				0x10, 0x23 };
		ret = requestUSBDataBtn(cmd_read_card, new byte[] { 0x00, 0x00, (byte) 0x90 });
		if (ret == null) {
			return null;
		}
		return decodeIdCardBaseInfo(ret);
	}

	//change byte[] into class identityinfo
	private IdentityInfo decodeIdCardBaseInfo(byte[] ret) {
		byte[] dataByte = Arrays.copyOfRange(ret, 6, ret.length);
		imageDatalength = (int) ((char) ret[2] * 256 + (char) ret[3]);
		contentLength = (ret[0] << 8 & 0xFF00);
		contentLength += ret[1];
		imageDatalength = (ret[2] << 8 & 0xFF00);
		imageDatalength += ret[3];
		fplength = (ret[4] << 8 & 0xFF00);
		fplength += ret[5];
		IdentityInfo info = new IdentityInfo();
		String stringBuffer = null;
		try {
			stringBuffer = new String(dataByte, "UTF16-LE");
			stringBuffer = new String(stringBuffer.getBytes("UTF-8"));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		info.setName(stringBuffer.substring(0, 60));
		info.setSex(stringBuffer.substring(60, 61));
		info.setNo(stringBuffer.substring(61, 76));
		info.setCountry(stringBuffer.substring(76, 79));
		info.setCn_name(stringBuffer.substring(79, 94));
		info.setPeriod(stringBuffer.substring(94, 110));
		info.setBorn(stringBuffer.substring(110, 118));
		info.setIdcard_version(stringBuffer.substring(118, 120));
		info.setApartment(stringBuffer.substring(120, 124));
		info.setCard_type(stringBuffer.substring(124, 125));
		info.setReserve(stringBuffer.substring(125, 128));
		info.setHead_photo(Arrays.copyOfRange(dataByte, 256, dataByte.length));
		if (!"I".equals(info.getCard_type())) {
			info.setName(stringBuffer.substring(0, 15));
			info.setSex(stringBuffer.substring(15, 16));
			info.setNation(stringBuffer.substring(16, 18));
			info.setBorn(stringBuffer.substring(18, 26));
			info.setAddress(stringBuffer.substring(26, 61).trim());
			info.setNo(stringBuffer.substring(61, 79).trim());
			info.setApartment(stringBuffer.substring(79, 94).trim());
			info.setPeriod(stringBuffer.substring(94, 110));
			info.setHead_photo(Arrays.copyOfRange(dataByte, 256, dataByte.length));
		}

		String temp;
		StringBuilder builder = new StringBuilder();
		temp = info.getName().trim();
		if (countChinese(temp) != 0) {
			if (temp.length() <= 4) {
				for (char c : temp.toCharArray()) {
					builder.append(c);
					builder.append(" ");
				}
			} else {
				if (temp.length() > 14) {
					builder.append(temp.substring(0, 14));
					builder.append("\n\t\t\t");
					builder.append(temp.substring(14));
				}
			}
			info.setName(builder.toString());
		} else {
			int splitIndex = 26;
			if (temp.length() > 26) {
				int d1, d2;
				String t = temp.substring(0, 26);
				d1 = t.lastIndexOf(" ");
				d2 = t.lastIndexOf(",");
				if (d1 != -1 || d2 != -1) {
					splitIndex = d1 > d2 ? d1 : d2;
				}
				builder.append(temp.substring(0, splitIndex + 1));
				builder.append("\n\t\t\t");
				builder.append(temp.substring(splitIndex + 1));
				info.setName(builder.toString());
			}
		}
		temp = info.getNation();
		try {
			info.setNation(nation_list[Integer.parseInt(temp) - 1]);
		} catch (NumberFormatException e) {
			e.printStackTrace();
		}
		temp = info.getSex();
		if ("1".equals(temp)) {
			info.setSex("男 / M");
		} else if ("2".equals(temp)) {
			info.setSex("女 / F");
		}
		temp = info.getBorn().trim();
		if (temp.length() >= 8) {
			info.setBorn(formatDate(temp));
		}
		temp = info.getPeriod().trim();
		if (temp.length() >= 16) {
			info.setPeriod(formatDate(temp.substring(0, 8)) + " - " + formatDate(temp.substring(8)));
		}
		if ("I".equals(info.getCard_type())) {
			info.setApartment("公安部/Ministry of Public Security");
		}
		return info;
	}

	private static int countChinese(String str) {
		int count = 0;
		Pattern p = Pattern.compile("[\\u4e00-\\u9fa5]");
		Matcher m = p.matcher(str);
		while (m.find()) {
			count++;
		}
		return count;
	}

	private static String formatDate(String date) {
		StringBuilder formatedDate = new StringBuilder();
		formatedDate.append(date.substring(0, 4));
		formatedDate.append(".");
		formatedDate.append(date.substring(4, 6));
		formatedDate.append(".");
		formatedDate.append(date.substring(6, 8));
		return formatedDate.toString();
	}

	private void detectUsbDeviceAttach() {
		// listen usb device attach
		IntentFilter usbDeviceStateFilter = new IntentFilter();

		usbDeviceStateFilter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);
		usbDeviceStateFilter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);
		usbDeviceStateFilter.addAction(UsbManager.ACTION_USB_ACCESSORY_ATTACHED);
		usbDeviceStateFilter.addAction(UsbManager.ACTION_USB_ACCESSORY_DETACHED);

		registerReceiver(mUsbReceiver, usbDeviceStateFilter);
	}

	private void showDefaultView(String content) {
		info_view.setVisibility(View.GONE);
		imageView1.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher));
		imageView1.setVisibility(View.VISIBLE);
		idcardInfo.setText("");
		def_view.setVisibility(View.VISIBLE);
		def_view.setText(content);
	}

	private void showInfoView() {
		info_view.setVisibility(View.VISIBLE);
		def_view.setVisibility(View.GONE);
		def_view.setText("");
	}

	private final BroadcastReceiver mReceiver = new BroadcastReceiver() {

		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			if (ACTION_USB_PERMISSION.equals(action)) {
				synchronized (this) {
					if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {//if have permission??
						if (idcard_reader != null) {
							hasPermission = true;
							getPermission.setVisibility(View.INVISIBLE);
							//change layout
							def_view.setText(getString(R.string.idcard_hqqxcg));
							hint_view.setText(getString(R.string.idcard_qfk));
							btn_read_circle.setEnabled(true);
							btn_read_once.setEnabled(true);
						}
					} else {
						if (handler1.hasMessages(1)) {
							handler1.removeMessages(1);
						}
						hasPermission = false;
						idcard_reader = null;
						getPermission.setVisibility(View.VISIBLE);
						def_view.setText(getString(R.string.idcard_qhqqx));
						if (handler1.hasMessages(1)) {
							handler1.removeMessages(1);
						}
					}
				}
			} else if (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(action)) {
				// openUsbIdCard();
				// fingercamera.isworking = false;
			} else if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {
				// openUsbIdCard();
			}
		}
	};

	BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {

			String curItentActionName = intent.getAction();

			if (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(curItentActionName)) {
				if (!isCardPressing) {
					return;
				}
				String path = "/dev/video";
				for (int i = 0; i < 15; i++) {
					Utils.upgradeRootPermission(path + i);
				}
				new Thread(new Runnable() {
					@Override
					public void run() {
						fingercamera.Init();
						handler2.sendMessageDelayed(handler2.obtainMessage(1, ""), 0);
						if (!isCount && isCircle) {
							isCount = true;
							timer = new Timer();
							task = new TimerTask() {
								int count_down = 10;

								@Override
								public void run() {
									Message msg = new Message();
									msg.what = 2;
									msg.arg1 = count_down;
									handler1.sendMessage(msg);
									count_down--;
									if (count_down < 0 || !isCount) {
										isCount = false;
										timer.cancel();
										handler1.sendEmptyMessage(3);
									}
								}
							};
							timer.schedule(task, 0, 1000);
						}
					}
				}).start();
				fingercamera.isworking = false;

			} else if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(curItentActionName)) {
				while(fingercamera.isworking);
				fingercamera.UnInit();
				// fingercamera.isworking = false;
			}
		}
	};

	void playSound(int src) {
		if (src == 4) {
			try {
				Thread.sleep(1500);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			soundPool.play(4, 1, 1, 0, 0, 1);
			return;
		}
		if (System.currentTimeMillis() - play_time >= 2 * 1000) {
			play_time = System.currentTimeMillis();
			soundPool.play(src, 1, 1, 0, 0, 1);
		}
	}
	
}





