package com.telpo.typeAcheck;		

import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;

import com.telpo.idcheck.R;
import com.telpo.idcheck.ShellUtils;
import com.telpo.tps550.api.util.StringUtil;
import com.telpo.tps550.api.util.SystemUtil;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbEndpoint;
import android.hardware.usb.UsbInterface;
import android.hardware.usb.UsbManager;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

public class UsbTACardActivity extends Activity{
	private static final byte[] TSAM_HEADER = new byte[]{(byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0x96, 0x69 };
	private byte[] Password;
	private byte[] Newwritedata;
	private Button tgetPermission, pwConfirm, writeData,writeDataConfirm;
	private TextView tcardInfo, thint_view, tdef_view, ttest_info_view;
	private EditText pwCheck, dataWrite;
	private TAInfo tinfo;
	private TASectorInfo tsectorinfo;
	private SoundPool tsoundPool;
	private View tinfo_view;
	private PendingIntent tPermissionIntent;//related to usb
	private static final String TACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION";
	private UsbManager tUsbManager;
	private UsbDevice tcard_reader;
	private GetTAInfoTask tAsyncTask;
	private PwCheckTask checkAsyncTask;
	private WriteDataTask dataAsyncTask;
	private boolean hastPermission = false;
	private boolean isUsingtUsb = false;
	private boolean hastReader = false;
	private boolean istFinish = false;
	private Handler handler3 = new Handler() {
		
		@Override
		public void handleMessage(Message msg) {
		    if (istFinish) {
			    return;
		    }
		    switch (msg.what) {
		    case 1:
		        tAsyncTask = new GetTAInfoTask();
		        tAsyncTask.execute();		        
			    break;
		    case 2:
		    	checkAsyncTask = new PwCheckTask();
			    checkAsyncTask.execute();
			    break;
		    case 3:
		    	dataAsyncTask = new WriteDataTask();
		    	dataAsyncTask.execute();
		    	break;
			}
		    super.handleMessage(msg);
		}
	};
	
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON,
				WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		setContentView(R.layout.idcard_usb);
		pwCheck = (EditText) findViewById(R.id.edittext1);
		
		tgetPermission = (Button) findViewById(R.id.requestPermission);
		pwConfirm = (Button) findViewById(R.id.passwordconfirm);
		writeData = (Button) findViewById(R.id.writedata);
		dataWrite = (EditText) findViewById(R.id.edittext2);		
		tcardInfo = (TextView) findViewById(R.id.showData);
		tinfo_view = findViewById(R.id.relativeLayout);
		thint_view = (TextView) findViewById(R.id.hint_view);
		tdef_view = (TextView) findViewById(R.id.default_view);
		ttest_info_view = (TextView) findViewById(R.id.test_info_view);
		writeDataConfirm = (Button) findViewById(R.id.writedataconfirm);
		tsoundPool = new SoundPool(10, AudioManager.STREAM_SYSTEM, 5);
		tsoundPool.load(this, R.raw.read_card, 1);
		tsoundPool.load(this, R.raw.verify_fail, 2);
		tsoundPool.load(this, R.raw.verify_success, 3);
		tsoundPool.load(this, R.raw.please_verify, 4);
		thint_view.setText(getString(R.string.idcard_typeA));
		
		ShellUtils.execCommand("echo 3 > /sys/class/telpoio/power_status", false);
		ShellUtils.execCommand("echo 2 > /dev/telpoio", false);
		tgetPermission.setOnClickListener(new View.OnClickListener(){
			
			@Override
			public void onClick(View v) {
				openUsbTACard();
			}
		});

		tPermissionIntent = PendingIntent.getBroadcast(UsbTACardActivity.this, 0, new Intent(TACTION_USB_PERMISSION), 0);
		IntentFilter tfilter = new IntentFilter();
		tfilter.addAction(TACTION_USB_PERMISSION);
		tfilter.addAction(UsbManager.ACTION_USB_ACCESSORY_DETACHED);
		tfilter.addAction(UsbManager.ACTION_USB_ACCESSORY_ATTACHED);
		tfilter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);
		tfilter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);
		registerReceiver(tReceiver, tfilter);
		
		pwConfirm.setOnClickListener(new View.OnClickListener(){
			
			@Override
			public void onClick(View v) {
				openLockCheck();
			}
			
		});
		
		writeData.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				openWriteData();
			}
		});
		
		writeDataConfirm.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				confirmData();
			}
		});				
	}
	
	protected void onDestroy(){
		super.onDestroy();
		unregisterReceiver(tReceiver);
		while(isUsingtUsb);
		ShellUtils.execCommand("echo 4 > /sys/class/telpoio/power_status", false);
	}
	
	@Override
	protected void onStart(){
		super.onStart();
//		if(SystemUtil.getDeviceType() == StringUtil.DeviceModelEnum.TPS580.ordinal()) {
//			ShellUtils.execCommand("echo 3 > /sys/class/telpoio/power_status", false);
//		}else if (SystemUtil.getDeviceType() == StringUtil.DeviceModelEnum.TPS510A.ordinal()) {
//			ShellUtils.execCommand("echo 3 > /dev/telpoio", false);
//		}
		ShellUtils.execCommand("echo 2 > /dev/telpoio", false);
		ShellUtils.execCommand("echo 3 > /sys/class/telpoio/power_status", false);
		openUsbTACard();
		writeData.setVisibility(View.GONE);		
		writeDataConfirm.setVisibility(View.GONE);
		istFinish = false;
	}
	
	protected void onStop(){
		super.onStop();
		if(handler3.hasMessages(1)) {
			handler3.removeMessages(1);
		}	
		if(handler3.hasMessages(2)) {
			handler3.removeMessages(2);
		}
		if(handler3.hasMessages(3)) {
			handler3.removeMessages(3);
		}
		pwCheck.setText("");
		dataWrite.setText("");
		ShellUtils.execCommand("echo 4 > /sys/class/telpoio/power_status", false);
		istFinish = true;
	}		
	//process of getting permission
	public void openUsbTACard(){
		isUsingtUsb = true;
		tUsbManager = (UsbManager) getSystemService(Context.USB_SERVICE);
		HashMap<String, UsbDevice> tdeviceHashMap = tUsbManager.getDeviceList();
		Iterator<UsbDevice> iterator = tdeviceHashMap.values().iterator();
		hastReader = false;
		
		while (iterator.hasNext()) {
			UsbDevice tusbDevice = iterator.next();
			int tpid = tusbDevice.getProductId();
			int tvid = tusbDevice.getVendorId();
			if (tpid == 0xc35a && tvid == 0x0400){
				hastReader = true;
				tcard_reader = tusbDevice;
				if (tUsbManager.hasPermission(tusbDevice)){
					tgetPermission.setVisibility(View.GONE);
					tdef_view.setText(getString(R.string.idcard_hqqxcg));
					thint_view.setText(getString(R.string.idcard_qfk));
					tdef_view.setVisibility(View.VISIBLE);
					pwConfirm.setVisibility(View.GONE);
					pwCheck.setVisibility(View.GONE);
					dataWrite.setVisibility(View.GONE);
					tcardInfo.setVisibility(View.GONE);
					hastPermission = true;
					handler3.sendMessageDelayed(handler3.obtainMessage(1,""),0);
					break;
				}else{
					tgetPermission.setVisibility(View.VISIBLE);
					tdef_view.setText(getString(R.string.idcard_qhqqx));
					hastPermission = false;
					tUsbManager.requestPermission(tusbDevice, tPermissionIntent);//***ÂºπÂá∫ÂØπËØùÊ°ÜÈóÆÊòØÂê¶ÂÖÅËÆ∏ÁöÑÊó∂ÂÄ?
				}
			}
		}
		isUsingtUsb = false;
		if (!hastReader){
			thint_view.setText(getString(R.string.idcard_wfljdkq));
			if(handler3.hasMessages(1)){
				handler3.removeMessages(1);
			}
		}
	}
		
	public void openLockCheck() {
		
		String password = new String(pwCheck.getText().toString());
		Password = hexStringToBytes(password);
		if ( hastReader && tcard_reader != null ) {
			handler3.sendMessageDelayed(handler3.obtainMessage(2,""), 0);
		}else if (!hastReader){
			thint_view.setText(getString(R.string.idcard_wfljdkq));
		}else if ( pwCheck.getText() == null) {
			thint_view.setText(getString(R.string.tacard_mybnwk));
		}
	}	
	
	
	public void openWriteData() {
		
		if ( hastReader && tcard_reader != null ) {
			thint_view.setText(getString(R.string.tacard_qxrsj));
		    tcardInfo.setVisibility(View.VISIBLE);
		    pwConfirm.setVisibility(View.INVISIBLE);
		    pwCheck.setVisibility(View.INVISIBLE);
		    writeData.setVisibility(View.INVISIBLE);
		    dataWrite.setVisibility(View.VISIBLE);
		    writeDataConfirm.setVisibility(View.VISIBLE);
		}		
	}
	
	
    public void confirmData() {
		
		String newwritedata = new String(dataWrite.getText().toString());
		Newwritedata = hexStringToBytes(newwritedata);
		if ( hastReader && tcard_reader != null ) {
			handler3.sendMessageDelayed(handler3.obtainMessage(3,""), 0);
		}else if (!hastReader){
			thint_view.setText(getString(R.string.idcard_wfljdkq));
		}
	}

	
	private class WriteDataTask extends AsyncTask<Void, Integer, Boolean> {
		
		@Override
		protected void onPreExecute() {
			super.onPreExecute();			
		}
		
		@Override
		protected Boolean doInBackground(Void...  arg2) {
			
			Boolean writeright = new Boolean(false);
			writeright = writeInData();
			return writeright;
		}
		
		@Override
		protected void onPostExecute(Boolean result) {
			super.onPostExecute(result);
			if (result == true) {
				thint_view.setText(getString(R.string.tacard_xrsjcg));
			}else if (result == false) {
				if( Newwritedata == null ) {
					openWriteData();
					thint_view.setText(getString(R.string.tacard_xrsjbnwk));
				}else {
					openWriteData();
					thint_view.setText(getString(R.string.tacard_xrsjsb));
				}				
			}			
		}
	}
	
	
	private class PwCheckTask extends AsyncTask<Void, Integer, Boolean>{
		
		@Override
		protected void onPreExecute() {
			super.onPreExecute();			
		}
		
		@Override
		protected Boolean doInBackground(Void...  arg1) {
			
			Boolean pwright = new Boolean(false);			
			pwright = checkPW();			
			return pwright;				
		}
		
		@Override 
		protected void onPostExecute(Boolean result) {
			super.onPostExecute(result);
			if (result == true) {
				thint_view.setText(getString(R.string.tacard_myyzcg));
				pwConfirm.setVisibility(View.INVISIBLE);
				pwCheck.setVisibility(View.INVISIBLE);
				readData();
				try{
					Thread.sleep(1000);
				} catch (InterruptedException a) {
					a.printStackTrace();
				}	
				tcardInfo.setText(getString(R.string.idcard_kh) + tinfo.getNum()+ "\n"
						+ getString(R.string.tacard_knsj) + tsectorinfo.getSectorData());
				writeData.setVisibility(View.VISIBLE);
			}else if (result == false){
				thint_view.setText(getString(R.string.tacard_mycw));				

			}			
		}
	}
	
	
	private class GetTAInfoTask extends AsyncTask<Void, Integer, Boolean>{
			
		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			tinfo = null;
		}
			
		@Override
		protected Boolean doInBackground(Void... arg){
			
			tinfo = checkTACard();
			if (tinfo != null){
				return true;				
			}
			return false;
		}
			
		@Override
		protected void onPostExecute(Boolean result){
			super.onPostExecute(result);
			if (result) {
				tcardInfo.setText(getString(R.string.idcard_kh) + tinfo.getNum());
				tcardInfo.setVisibility(View.VISIBLE);
				showtInfoView();
				thint_view.setText(getString(R.string.tacard_myrz));
				pwCheck.setVisibility(View.VISIBLE);
				pwConfirm.setVisibility(View.VISIBLE);
			}else {
				handler3.sendMessageDelayed(handler3.obtainMessage(1, ""), 500);
			}			
		}
	}		
	
	private final BroadcastReceiver tReceiver = new BroadcastReceiver(){
		
		public void onReceive(Context context, Intent intent){
			String action = intent.getAction();
			if (TACTION_USB_PERMISSION.equals(action)){
				synchronized(this){
					if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)){
						if (tcard_reader != null){
							hastPermission = true;
							tgetPermission.setVisibility(View.INVISIBLE);				
							tdef_view.setText(getString(R.string.idcard_hqqxcg));
							thint_view.setText(getString(R.string.idcard_qfk));
							handler3.sendMessageDelayed(handler3.obtainMessage(1, ""), 0);
						}
					}else{
						if (handler3.hasMessages(1)){
							handler3.removeMessages(1);
						}
						hastPermission = false;
						tcard_reader = null;
						tgetPermission.setVisibility(View.VISIBLE);
						tdef_view.setText(getString(R.string.idcard_qhqqx));
					}
                }					
			}else if (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(action)) {
				// openUsbTACard();
				// fingercamera.isworking = false;
			} else if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {
				// openUsbTACard();
			}	
		}
	};
	
	private TAInfo checkTACard(){
		byte[] cmd_read_uid = new byte[]{(byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0x96, 0x69, 0x00, 0x04, (byte) 0x80, 0x05, 0x10,(byte) 0x91};
		byte[] uid = requestUid( cmd_read_uid, new byte[]{ 0x05, 0x00, (byte) 0x90 });		
		if (uid ==null) {
			return null;			
		}
		String newuid = decodetcarduid(uid);
		TAInfo tinfo = new TAInfo();
		tinfo.setNum(newuid);
		return tinfo;
	}
	
    protected void onDataReceived(final byte[] buffer, final int size, final int n) {
    	
    }
	
	public byte[] requestUid(byte[] tcmd, byte[] sw) {  
		
		if (tcard_reader != null && sw.length == 3) {
			
			UsbInterface tInterface = tcard_reader.getInterface(0);
			UsbEndpoint iEndpoint = tInterface.getEndpoint(0);
			UsbEndpoint oEndpoint = tInterface.getEndpoint(1);
			UsbDeviceConnection tconnection;
			
			tconnection = tUsbManager.openDevice(tcard_reader);
			
			if (tconnection == null) {
				if (handler3.hasMessages(1)) {
					handler3.removeMessages(1);
				}
				return null;
			}	
			tconnection.claimInterface(tInterface, true);
			int output = tconnection.bulkTransfer(oEndpoint, tcmd, tcmd.length, 3000);	
			
			try{
				Thread.sleep(500);
			} catch (InterruptedException a) {
				a.printStackTrace();
			}		
			byte[]rec = new byte[1024];
			
			int input = tconnection.bulkTransfer(iEndpoint, rec, rec.length, 3000);				
			for (int i = 0; i < TSAM_HEADER.length; i++) {
				if (rec[i] != TSAM_HEADER[i]) {
					tconnection.close();
					return null;					
				}
			}
			
			for (int i = 0; i < sw.length; i++) {
				if (rec[i + TSAM_HEADER.length + 2] != sw[i]){
					tconnection.close();
					return null;
				}
			}
			tconnection.close();
			return Arrays.copyOfRange(rec, TSAM_HEADER.length+5, TSAM_HEADER.length+9);			
		}
		return null;
	}		
	
		
	private static String decodetcarduid(byte[] uid) {
		StringBuilder ret = new StringBuilder("");
		for (int i = 0; i < uid.length; i++) {
			int v = uid[i] & 0xff;
			String hex = Integer.toHexString(v);
		    if (hex.length() == 1) {
		    	hex = '0' + hex;
		    	}
		    ret.append(hex);
		    }
		return ret.toString();
		}
	
	
	private Boolean checkPW() {
		
		Boolean pwfeeback = false;
		byte[] cmd_pwcheck = new byte[17];
		System.arraycopy(new byte[]{(byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0x96, 0x69, 0x00, 0x10, (byte) 0x80, 0x0B, 0x01}, 0, cmd_pwcheck, 0, 10);
		for ( int i = 0; i < Password.length; i++) {
			cmd_pwcheck[10+i] = Password[i];	
	    }
	    int check_sum = cmd_pwcheck.length-1;
	    cmd_pwcheck[check_sum] = (byte) 0x9A;
	    pwfeeback = requestpw (cmd_pwcheck, new byte[]{0x0B, 0x00, (byte) 0x90});
	    return pwfeeback;	    
	}
	
	
	private Boolean requestpw (byte[]pcmd, byte[]psw) {
		if (tcard_reader != null && psw.length == 3) {
			
			UsbInterface pInterface = tcard_reader.getInterface(0);
			UsbEndpoint iEndpoint = pInterface.getEndpoint(0);
			UsbEndpoint oEndpoint = pInterface.getEndpoint(1);
			UsbDeviceConnection pconnection;
			
			pconnection = tUsbManager.openDevice(tcard_reader);
			
			if (pconnection == null) {
				if (handler3.hasMessages(2)) {
					handler3.removeMessages(2);
				}
				return null;
			}	
			pconnection.claimInterface(pInterface, true);
			
			int output = pconnection.bulkTransfer(oEndpoint, pcmd, pcmd.length, 3000);
			try{
				Thread.sleep(500);
			} catch (InterruptedException a) {
				a.printStackTrace();
			}		
			
			byte[] prec = new byte[1024];
			int input = pconnection.bulkTransfer(iEndpoint, prec, prec.length, 3000);
			
			for (int i = 0; i < TSAM_HEADER.length; i++) {
				if (prec[i] != TSAM_HEADER[i]) {
					pconnection.close();
					return null;					
				}
			}
			for (int i = 0; i < psw.length; i++) {
				if (prec[i + TSAM_HEADER.length + 2] != psw[i]){
					pconnection.close();
					return false;
				}	
			}
			pconnection.close();
			return true;
		}
		return null;
	}
		
	
	private void readData() {
		
		byte[] cmd_read_data = new byte[]{(byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0x96, 0x69, 0x00, 0x06, (byte) 0x80, 0x0D, 0x01, 0x01,
				0x10, (byte) 0x9B};
		byte[] data = requestData( cmd_read_data, new byte[]{ 0x0D, 0x00, (byte) 0x90 });		
		if (data ==null) {
			tsectorinfo = null;			
		} else {
			String newdata = decodetcarduid(data);
			tsectorinfo = new TASectorInfo();
			tsectorinfo.setSectorData(newdata);	
		}	
	}
	
	
	private byte[] requestData (byte[]dcmd, byte[]dsw) {
		
		if (tcard_reader != null && dsw.length == 3) {
			
			UsbInterface dInterface = tcard_reader.getInterface(0);
			UsbEndpoint iEndpoint = dInterface.getEndpoint(0);
			UsbEndpoint oEndpoint = dInterface.getEndpoint(1);
			UsbDeviceConnection dconnection;
			
			dconnection = tUsbManager.openDevice(tcard_reader);
			
			if (dconnection == null) {
				if (handler3.hasMessages(2)) {
					handler3.removeMessages(2);
				}
				return null;
			}
			
			dconnection.claimInterface(dInterface, true);
			int output = dconnection.bulkTransfer(oEndpoint, dcmd, dcmd.length, 3000);	
			try{
				Thread.sleep(500);
			} catch (InterruptedException a) {
				a.printStackTrace();
			}
			
			byte[] drec = new byte[1024];
			int input = dconnection.bulkTransfer(iEndpoint, drec, drec.length, 3000);
			
			for (int i = 0; i < TSAM_HEADER.length; i++) {
				if (drec[i] != TSAM_HEADER[i]) {
					dconnection.close();
					return null;					
				}
			}
			for (int i = 0; i < dsw.length; i++) {
				if (drec[i + TSAM_HEADER.length + 2] != dsw[i]){
					dconnection.close();
					return null;
				}
			}
			dconnection.close();
			return Arrays.copyOfRange(drec, TSAM_HEADER.length+5, TSAM_HEADER.length+21);				
		}
		return null;
	}
			
	
	private Boolean writeInData() {
		
		byte[] cmd_write_data = new byte[29];
		System.arraycopy(new byte[]{(byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0x96, 0x69, 0x00, 0x16, (byte) 0x80, 0x0E, 0x01, 0x01, 0x10}, 0, cmd_write_data, 0, 12);
		Boolean writefeeback = false;
		if( Newwritedata == null ) {			
			writefeeback = false;
			return writefeeback;
		}else if ( Newwritedata != null ) {
			for ( int i = 0; i < Newwritedata.length; i++) {
				cmd_write_data[12+i] = Newwritedata[i];				
				}
			if (Newwritedata.length < 16) {
				int repairzero = 16 - Newwritedata.length;
				for (int d = 0; d < repairzero; d++) {
					cmd_write_data[12+Newwritedata.length+d] = 0;
				}
			}
			byte[] cmd_checksum = new byte[23]; 
			System.arraycopy(new byte[] { 0x00, 0x16, (byte) 0x80, 0x0E, 0x01, 0x01, 0x10}, 0, cmd_checksum, 0, 7);
			for ( int i = 0; i < Newwritedata.length; i++) {
				cmd_checksum[7+i] = Newwritedata[i];				
				}		
			int check_sum = cmd_write_data.length-1;
			cmd_write_data[check_sum] = crc(cmd_checksum);			
			writefeeback = requestwrite(cmd_write_data, new byte[] {0x0E, 0x00, (byte) 0x90});
			return writefeeback;
		}
		return writefeeback;
	}
	
	
	private Boolean requestwrite(byte[]wcmd, byte[]wsw) {
		
		if (tcard_reader != null && wsw.length == 3) {
			
			UsbInterface wInterface = tcard_reader.getInterface(0);
			UsbEndpoint iEndpoint = wInterface.getEndpoint(0);
			UsbEndpoint oEndpoint = wInterface.getEndpoint(1);
			UsbDeviceConnection wconnection;
			
			wconnection = tUsbManager.openDevice(tcard_reader);
			
			if (wconnection == null) {
				if (handler3.hasMessages(3)) {
					handler3.removeMessages(3);
				}
				return null;
			}	
			wconnection.claimInterface(wInterface, true);
			
			int output = wconnection.bulkTransfer(oEndpoint, wcmd, wcmd.length, 3000);
			try{
				Thread.sleep(500);
			} catch (InterruptedException a) {
				a.printStackTrace();
			}		
			
			byte[] wrec = new byte[1024];
			int input = wconnection.bulkTransfer(iEndpoint, wrec, wrec.length, 3000);
			
			for (int i = 0; i < TSAM_HEADER.length; i++) {
				if (wrec[i] != TSAM_HEADER[i]) {
					wconnection.close();
					return null;					
				}
			}
			for (int i = 0; i < wsw.length; i++) {
				if (wrec[i + TSAM_HEADER.length + 2] != wsw[i]){
					wconnection.close();
					return false;
				}	
			}
			wconnection.close();
			return true;
		}
		return null;			
	}
	
	
	private void showtInfoView() {
		tinfo_view.setVisibility(View.VISIBLE);
		tdef_view.setVisibility(View.GONE);
		tdef_view.setText("");
	}
	
	
	
	private void showtDefaultView() {
		tinfo_view.setVisibility(View.GONE);
	    tdef_view.setVisibility(View.VISIBLE);
	    tgetPermission.setVisibility(View.VISIBLE);
	    tcardInfo.setText("");
	}

		
	public static byte[] hexStringToBytes(String hexString) {   
	    if (hexString == null || hexString.equals("")) {   
	        return null;   
	    }   
	    hexString = hexString.toUpperCase();   
	    int length = hexString.length() / 2;   
	    char[] hexChars = hexString.toCharArray();   
	    byte[] d = new byte[length];   
	    for (int i = 0; i < length; i++) {   
	        int pos = i * 2;   
	        d[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));   
	    }   
	    return d;   
	}   
	
	
	private static byte charToByte(char c) {   
	    return (byte) "0123456789ABCDEF".indexOf(c);   
	}  
	
	
	private byte crc(byte[] data){
	    
		int i; 
	    byte crc=0x00;
	    
	    for(byte b:data) {
	    	crc ^= b;  
	    }
	    return crc;
	}
}	
	

				
			
				
	
			
	
	

















 












