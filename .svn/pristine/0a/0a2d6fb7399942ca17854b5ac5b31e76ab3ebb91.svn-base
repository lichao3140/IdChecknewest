package com.telpo.idcheck;

import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import com.telpo.finger.FingerPreview;
import com.telpo.finger.FingerprintPowerManager;
import com.telpo.finger.Utils;
import com.telpo.tps550.api.TelpoException;
import com.telpo.tps550.api.idcard.CountryMap;
import com.telpo.tps550.api.idcard.IdCard;
import com.telpo.tps550.api.idcard.IdentityInfo;
import com.telpo.tps550.api.util.StringUtil;
import com.telpo.tps550.api.util.SystemUtil;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.usb.UsbManager;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public class SerialIdCardActivity extends Activity {
	private TextView idcardInfo, hint_view, def_view, test_info_view;
	private ImageView imageView1, imageView2;
	private Button btn_read_once, btn_read_circle;
	private IdentityInfo info;
	private SoundPool soundPool;
	Bitmap bitmap;
	byte[] image;
	View info_view;
	CountryMap countryMap = CountryMap.getInstance();
	byte[] fringerprint;
	private String fringerprintData;
	private static boolean isCardPressing = false;
	private boolean hasReader = false;
	private boolean isFinish = false;
	private boolean isCount = false;
	private int count_time = 0;
	private boolean isCircle = false;
	private boolean hasCircle = false;
	private int success = 0;
	private GetIDInfoTask mAsyncTask;
	private FingerPreview fingercamera;
	private Timer timer = new Timer();
	private TimerTask task;
	private static long play_time = 0;

	private Handler handler1 = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			if (isFinish) {
				return;
			}
			switch (msg.what) {
			case 1:
				mAsyncTask = new GetIDInfoTask();
				mAsyncTask.execute();
				break;
			case 2:
				String text = hint_view.getText().toString();
				int index = text.indexOf("\n");
				if (index != -1) {
					text = text.substring(0, index);
				}
				hint_view.setText(text + "\n" + getString(R.string.idcard_djs) + msg.arg1);
				break;
			case 3:
				// 超时
				imageView2.setVisibility(View.INVISIBLE);
				isCardPressing = false;
				if (handler2.hasMessages(1)) {
					handler2.removeMessages(1);
				}
				while (fingercamera.isworking)
					;
				FingerprintPowerManager.SetFingerPower(0);
				hint_view.setText(getString(R.string.idcard_qfk));
				test_info_view
						.setText(getString(R.string.idcard_cscs) + count_time + "  " + getString(R.string.idcard_cgcs)
								+ success + "  " + getString(R.string.idcard_sbcs) + (count_time - success));
				showDefaultView(getString(R.string.idcard_dqsbhcs));
				handler1.sendMessage(handler1.obtainMessage(1, ""));
				break;
			}
			super.handleMessage(msg);
		}
	};
	private Handler handler2 = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			if (isFinish) {
				return;
			}
			if (!isCardPressing) {
				return;
			}
			switch (msg.what) {
			case 1:
				imageView2.setVisibility(View.INVISIBLE);
				if (fringerprint != null) {
					fingercamera.StartCompareFeatureThread(fringerprint);
				}
				break;
			case 2:
				// Matchingsucceeded
				if (!isCount && isCircle) {
					// handler2.sendMessageDelayed(handler2.obtainMessage(1, ""), 0);
					if (handler2.hasMessages(1)) {
						handler2.removeMessages(1);
					}
					return;
				}
				imageView2.setImageBitmap(
						BitmapFactory.decodeByteArray(fingercamera.grey_bmp_buffer, 0, 256 * 360 + 1024 + 54));
				imageView2.setVisibility(View.VISIBLE);
				playSound(3);
				hint_view.setText(getString(R.string.fprint_ppcg));
				isCount = false;
				fringerprint = null;
				if(!isCircle) {
					while (fingercamera.isworking)
						;
					FingerprintPowerManager.SetFingerPower(0);
					btn_read_once.setEnabled(true);
					btn_read_circle.setEnabled(true);
				}
				break;
			case -2:
				// Matchingfailed
				if (!isCount && isCircle) {
					handler2.sendMessageDelayed(handler2.obtainMessage(1, ""), 0);
					return;
				}
				playSound(2);
				hint_view.setText(getString(R.string.fprint_ppsb));
				fringerprint = null;
				if(!isCircle) {
					while (fingercamera.isworking)
						;
					FingerprintPowerManager.SetFingerPower(0);
					btn_read_once.setEnabled(true);
					btn_read_circle.setEnabled(true);
				}else {
					handler2.sendMessageDelayed(handler2.obtainMessage(1, ""), 0);
				}
				break;
			case 3:
				// founduvcdevice
				Log.e("sss", "founduvcdevice");
				break;
			case -3:
				// notfounduvcdevice
				hint_view.setText(getString(R.string.fprint_wzwy));
				Log.e("sss", "notfounduvcdevice");
				break;
			case -13:
				// outoftime
				imageView2.setVisibility(View.INVISIBLE);
				handler2.sendMessageDelayed(handler2.obtainMessage(1, ""), 500);
				break;
			case -1:
				finish();
				break;
			}
			super.handleMessage(msg);
		}
	};

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		setContentView(R.layout.idcard_main);
		idcardInfo = (TextView) findViewById(R.id.showData);
		imageView1 = (ImageView) findViewById(R.id.imageView1);
		imageView2 = (ImageView) findViewById(R.id.imageView2);
		hint_view = (TextView) findViewById(R.id.hint_view);
		info_view = findViewById(R.id.relativeLayout);
		def_view = (TextView) findViewById(R.id.default_view);
		test_info_view = (TextView) findViewById(R.id.test_info_view);
		btn_read_once = (Button) findViewById(R.id.read_once);
		btn_read_circle = (Button) findViewById(R.id.read_circle);
		
		btn_read_once.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				showDefaultView("");
				btn_read_once.setEnabled(false);
				btn_read_circle.setEnabled(false);
				if (SystemUtil.getDeviceType() == StringUtil.DeviceModelEnum.TPS350.ordinal()) {
					if (checkPackage("com.example.idcard.hid")) {
						switchToTPS350AUsbIdCard();
					} else {
						Toast.makeText(SerialIdCardActivity.this, getString(R.string.idcard_not_find_usb_demo),
								Toast.LENGTH_SHORT).show();
					}
				} else {
					handler1.sendMessage(handler1.obtainMessage(1, ""));
				}
			}
		});
		
		btn_read_circle.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				isCircle = !isCircle;
				if (isCircle) {
					hasCircle = true;
					showDefaultView("");
					count_time = 0;
					success = 0;
					btn_read_circle.setText(getString(R.string.idcard_stop_read));
					btn_read_once.setEnabled(false);
					if (SystemUtil.getDeviceType() == StringUtil.DeviceModelEnum.TPS350.ordinal()) {
						if (checkPackage("com.example.idcard.hid")) {
							switchToTPS350AUsbIdCard();
						} else {
							Toast.makeText(SerialIdCardActivity.this, getString(R.string.idcard_not_find_usb_demo),
									Toast.LENGTH_SHORT).show();
						}
					} else {
						handler1.sendMessageDelayed(handler1.obtainMessage(1, ""), 0);
					}
				} else {
					btn_read_circle.setText(getString(R.string.idcard_start_read));
					btn_read_once.setEnabled(false);
					btn_read_circle.setEnabled(false);
				}
			}
		});

//		beepManager = new BeepManager(this, R.raw.read_card_success);
		soundPool= new SoundPool(10,AudioManager.STREAM_SYSTEM,5);
		soundPool.load(this,R.raw.read_card,1);
		soundPool.load(this,R.raw.verify_fail,2);
		soundPool.load(this,R.raw.verify_success,3);
		soundPool.load(this,R.raw.please_verify,4);

		fingercamera = new FingerPreview(this, handler2);

		test_info_view.setText(getString(R.string.idcard_cscs) + count_time + "  " + getString(R.string.idcard_cgcs)
				+ success + "  " + getString(R.string.idcard_sbcs) + (count_time - success));
		detectUsbDeviceAttach();
	}

	@Override
	protected void onStart() {
		// TODO Auto-generated method stub
		super.onStart();
//		beepManager = new BeepManager(this, R.raw.read_card_success);
		// if (hasReader) {
		// if (handler1.hasMessages(1)) {
		// handler1.removeMessages(1);
		// handler1.sendMessageDelayed(handler1.obtainMessage(1, ""), 0);
		// }
		// }
		isFinish = false;
	}

	@Override
	protected void onStop() {
		// TODO Auto-generated method stub
		super.onStop();
		if (handler1.hasMessages(1)) {
			handler1.removeMessages(1);
		}
		if (handler2.hasMessages(1)) {
			handler2.removeMessages(1);
		}
		isFinish = true;
//		beepManager.close();
//		beepManager = null;
		isCount = false;
		while (fingercamera.isworking)
			;
		FingerprintPowerManager.SetFingerPower(0);
	}

	@Override
	protected void onResume() {
		super.onResume();
//		showDefaultView("");
//		hint_view.setText(getString(R.string.idcard_qfk));
//		if (SystemUtil.getDeviceType() == StringUtil.DeviceModelEnum.TPS350.ordinal()) {
//			if (checkPackage("com.example.idcard.hid")) {
//				switchToTPS350AUsbIdCard();
//			} else {
//				Toast.makeText(SerialIdCardActivity.this, getString(R.string.idcard_not_find_usb_demo),
//						Toast.LENGTH_SHORT).show();
//			}
//		} else {
//			handler1.sendMessageDelayed(handler1.obtainMessage(1, ""), 0);
//		}
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		isCardPressing = false;
		unregisterReceiver(mUsbReceiver);
		while(fingercamera.isworking);
		fingercamera.UnInit();
	}

	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		if (handler1.hasMessages(1)) {
			handler1.removeMessages(1);
		}
		if (handler2.hasMessages(1)) {
			handler2.removeMessages(1);
		}
		while (fingercamera.isworking)
			;
		FingerprintPowerManager.SetFingerPower(0);
		super.onBackPressed();
	}

	private class GetIDInfoTask extends AsyncTask<Void, Integer, TelpoException> {

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			Log.e("sss", "exex");
			info = null;
			bitmap = null;
			fringerprintData = "";
			fringerprint = null;
		}

		@Override
		protected TelpoException doInBackground(Void... arg0) {
			TelpoException result = null;
			try {
				IdCard.open();
				
				info =  IdCard.checkIdCard(1000);
				if ("".equals(info.getName())) {
					return new TelpoException();
				}
				image = IdCard.getIdCardImage();
				bitmap = IdCard.decodeIdCardImage(image);
				// luyq add 增加指纹信息
				if (!"I".equals(info.getCard_type())) {
					// luyq add 增加指纹信息 中国籍才有指纹
					fringerprint = IdCard.getFringerPrint();
					fringerprintData = getFingerInfo(fringerprint);
				}
			} catch (TelpoException e) {
				e.printStackTrace();
				result = e;
			} finally {
				IdCard.close();
			}
			return result;
		}

		@Override
		protected void onPostExecute(TelpoException result) {
			super.onPostExecute(result);
			if (result == null) {

				if ("I".equals(info.getCard_type())) {
					// luyq add 20170823 增加外籍身份证信息显示
					idcardInfo.setText(getString(R.string.idcard_xm) + info.getName() + "\n"
							+ getString(R.string.idcard_cn_name) + info.getCn_name() + "\n" // Chinese name
							+ getString(R.string.idcard_xb) + info.getSex() + "\n" + getString(R.string.idcard_csrq)
							+ info.getBorn() + "\n" + getString(R.string.idcard_country)
							+ countryMap.getCountry(info.getCountry()) + " / " + info.getCountry() + "\n"
							+ getString(R.string.idcard_yxqx) + info.getPeriod() + "\n"
							+ getString(R.string.idcard_qzjg) + info.getApartment() + "\n"
							+ getString(R.string.idcard_sfhm) + info.getNo() + "\n"
							+ getString(R.string.idcard_version) + info.getIdcard_version() + "\n");
				} else {
					idcardInfo.setText(getString(R.string.idcard_xm) + info.getName() + "\n"
							+ getString(R.string.idcard_xb) + info.getSex() + "\n" + getString(R.string.idcard_mz)
							+ info.getNation() + "\n" + getString(R.string.idcard_csrq) + info.getBorn() + "\n"
							+ getString(R.string.idcard_dz) + info.getAddress() + "\n"
							+ getString(R.string.idcard_sfhm) + info.getNo() + "\n" + getString(R.string.idcard_qzjg)
							+ info.getApartment() + "\n" + getString(R.string.idcard_yxqx) + info.getPeriod() + "\n"
							+ getString(R.string.idcard_zwxx) + fringerprintData);
				}
				imageView1.setImageBitmap(bitmap);
				showInfoView();

				isCardPressing = true;
				playSound(1);
				success++;
				if (fringerprintData == null || "".equals(fringerprintData) || fringerprint == null
						|| getString(R.string.idcard_wdqhbhzw).equals(fringerprintData.trim())) {
					// 鍏抽棴鎸囩汗浠�
					if (handler2.hasMessages(1)) {
						handler2.removeMessages(1);
					}
					while (fingercamera.isworking)
						;
					FingerprintPowerManager.SetFingerPower(0);
					hint_view.setText("");
					if (!isCount && isCircle) {
						isCount = true;
						timer = new Timer();
						TimerTask task = new TimerTask() {
							int count_down = 3;

							@Override
							public void run() {
								Message msg = new Message();
								msg.what = 2;
								msg.arg1 = count_down;
								handler1.sendMessage(msg);
								count_down--;
								if (count_down < 0 || !isCount) {
									isCount = false;
									timer.cancel();
									handler1.sendEmptyMessage(3);
								}
							}
						};
						timer.schedule(task, 0, 1000);
					}else {
						btn_read_once.setEnabled(true);
						btn_read_circle.setEnabled(true);
					}
					count_time++;
				} else {
					// 打开指纹仪
					count_time++;
					imageView2.setVisibility(View.INVISIBLE);
					while (fingercamera.isworking)
						;
					FingerprintPowerManager.SetFingerPower(0);
					FingerprintPowerManager.SetFingerPower(1);
					hint_view.setText(getString(R.string.fprint_qyzzw));
					//handler2.sendMessageDelayed(handler2.obtainMessage(1, ""), 0);
					playSound(4);
				}
			} else {
				if (isCircle) {
					handler1.sendMessageDelayed(handler1.obtainMessage(1, ""), 100);
				} else {
					if(!hasCircle) {
						playSound(5);
					}
					hasCircle = false;
					btn_read_once.setEnabled(true);
					btn_read_circle.setEnabled(true);
					showDefaultView("");
				}
			}
		}
	}

	private void switchToTPS350AUsbIdCard() {
		Intent intent = new Intent();
		intent.setClassName("com.example.idcard.hid", "com.example.demo.MiniIDReaderActivityNew");
		startActivity(intent);
	}

	private boolean checkPackage(String packageName) {
		PackageManager manager = this.getPackageManager();
		Intent intent = new Intent().setPackage(packageName);
		List<ResolveInfo> infos = manager.queryIntentActivities(intent, PackageManager.GET_INTENT_FILTERS);
		if (infos == null || infos.size() < 1) {
			return false;
		}
		return true;
	}

	private String GetFingerName(int fingerPos) {
		String fingerName = "";
		switch (fingerPos) {
		case 11:
			// 鍙虫墜鎷囨寚
			fingerName = getString(R.string.idcard_ysmz);
			break;
		case 12:
			// 鍙虫墜椋熸寚
			fingerName = getString(R.string.idcard_yssz);
			break;
		case 13:
			// 鍙虫墜涓寚
			fingerName = getString(R.string.idcard_yszz);
			break;
		case 14:
			// 鍙虫墜鐜寚
			fingerName = getString(R.string.idcard_yshz);
			break;
		case 15:
			// 鍙虫墜灏忔寚
			fingerName = getString(R.string.idcard_ysxz);
			break;
		case 16:
			// 宸︽墜鎷囨寚
			fingerName = getString(R.string.idcard_zsmz);
			break;
		case 17:
			// 宸︽墜椋熸寚
			fingerName = getString(R.string.idcard_zssz);
			break;
		case 18:
			// 宸︽墜涓寚
			fingerName = getString(R.string.idcard_zszz);
			break;
		case 19:
			// 宸︽墜鐜寚
			fingerName = getString(R.string.idcard_zshz);
			break;
		case 20:
			// 宸︽墜灏忔寚
			fingerName = getString(R.string.idcard_zsxz);
			break;
		case 97:
			// 鍙虫墜涓嶇‘瀹氭寚浣�
			fingerName = getString(R.string.idcard_ysbqdzw);
			break;
		case 98:
			// 宸︽墜涓嶇‘瀹氭寚浣�
			fingerName = getString(R.string.idcard_zsbqdzw);
			break;
		case 99:
			// 鍏朵粬涓嶇‘瀹氭寚浣�
			fingerName = getString(R.string.idcard_qtbqdzw);
			break;
		default:
			// 鎸囦綅鏈煡
			fingerName = getString(R.string.idcard_zwwz);
			break;
		}
		return fingerName;
	}

	// 绗�5瀛楄妭涓烘敞鍐岀粨鏋滀唬鐮侊紝0x01-娉ㄥ唽鎴愬姛锛�0x02--娉ㄥ唽澶辫触, 0x03--鏈敞鍐�, 0x09--鏈煡
	private String GetFingerStatus(int fingerStatus) {
		String fingerStatusName = "";
		switch (fingerStatus) {
		case 0x01:
			// 娉ㄥ唽鎴愬姛
			fingerStatusName = getString(R.string.idcard_zccg);
			break;
		case 0x02:
			// 娉ㄥ唽澶辫触
			fingerStatusName = getString(R.string.idcard_zcsb);
			break;
		case 0x03:
			// 鏈敞鍐�
			fingerStatusName = getString(R.string.idcard_wzc);
			break;
		case 0x09:
			// 娉ㄥ唽鐘舵�佹湭鐭�
			fingerStatusName = getString(R.string.idcard_zcztwz);
			break;
		default:
			// 娉ㄥ唽鐘舵�佹湭鐭�
			fingerStatusName = getString(R.string.idcard_zcztwz);
			break;
		}
		return fingerStatusName;
	}

	private String getFingerInfo(byte[] fpData) {
		// 瑙ｉ噴绗�1鏋氭寚绾癸紝鎬婚暱搴�512瀛楄妭锛岄儴鍒嗘暟鎹牸寮忥細
		// 绗�1瀛楄妭涓虹壒寰佹爣璇�'C'
		// 绗�5瀛楄妭涓烘敞鍐岀粨鏋滀唬鐮侊紝0x01-娉ㄥ唽鎴愬姛锛�0x02--娉ㄥ唽澶辫触, 0x03--鏈敞鍐�, 0x09--鏈煡
		// 绗�6瀛楄妭涓烘寚浣嶄唬鐮�
		// 绗�7瀛楄妭涓烘寚绾硅川閲忓�硷紝0x00琛ㄧず鏈煡锛�1~100琛ㄧず璐ㄩ噺鍊�
		// 绗�512瀛楄妭 crc8鍊�
		String fingerInfo = "";
		if (fpData != null && fpData.length == 1024 && fpData[0] == 'C') {
			fingerInfo = fingerInfo + GetFingerName(fpData[5]);

			if (fpData[4] == 0x01) {
				fingerInfo = fingerInfo + " " + getString(R.string.idcard_zwzl) + String.valueOf(fpData[6]);
			} else {
				fingerInfo = fingerInfo + GetFingerStatus(fpData[4]);
			}

			fingerInfo = fingerInfo + "  ";
			if (fpData[512] == 'C') {
				fingerInfo = fingerInfo + GetFingerName(fpData[512 + 5]);

				if (fpData[512 + 4] == 0x01) {
					fingerInfo = fingerInfo + " " + getString(R.string.idcard_zwzl) + String.valueOf(fpData[512 + 6]);
				} else {
					fingerInfo = fingerInfo + GetFingerStatus(fpData[512 + 4]);
				}
			}
		} else {
			fingerInfo = getString(R.string.idcard_wdqhbhzw);
		}

		return fingerInfo;
	}

	private void detectUsbDeviceAttach() {
		// listen usb device attach
		IntentFilter usbDeviceStateFilter = new IntentFilter();

		usbDeviceStateFilter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);
		usbDeviceStateFilter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);
		usbDeviceStateFilter.addAction(UsbManager.ACTION_USB_ACCESSORY_ATTACHED);
		usbDeviceStateFilter.addAction(UsbManager.ACTION_USB_ACCESSORY_DETACHED);

		registerReceiver(mUsbReceiver, usbDeviceStateFilter);
	}

	private void showDefaultView(String content) {
		info_view.setVisibility(View.GONE);
		imageView1.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher));
		idcardInfo.setText("");
		def_view.setVisibility(View.VISIBLE);
		def_view.setText(content);
	}

	private void showInfoView() {
		info_view.setVisibility(View.VISIBLE);
		def_view.setVisibility(View.GONE);
		def_view.setText("");
	}

	BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {

			String curItentActionName = intent.getAction();

			if (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(curItentActionName)) {
				if (!isCardPressing) {
					return;
				}
				String path = "/dev/video";
				for (int i = 0; i < 15; i++) {
					Utils.upgradeRootPermission(path + i);
				}
				new Thread(new Runnable() {
					@Override
					public void run() {
						fingercamera.Init();
						handler2.sendMessageDelayed(handler2.obtainMessage(1, ""), 0);
						if (!isCount && isCircle) {
							isCount = true;
							timer = new Timer();
							task = new TimerTask() {
								int count_down = 10;

								@Override
								public void run() {
									Message msg = new Message();
									msg.what = 2;
									msg.arg1 = count_down;
									handler1.sendMessage(msg);
									count_down--;
									if (count_down < 0 || !isCount) {
										isCount = false;
										timer.cancel();
										handler1.sendEmptyMessage(3);
									}
								}
							};
							timer.schedule(task, 0, 1000);
						}
					}
				}).start();
				fingercamera.isworking = false;

			} else if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(curItentActionName)) {
				while(fingercamera.isworking);
				fingercamera.UnInit();
				// fingercamera.isworking = false;
			}
		}
	};
	void playSound(int src) {
		if(src == 4) {
			try {
				Thread.sleep(1500);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			soundPool.play(4, 1, 1, 0, 0, 1);
			return;
		}
		if(System.currentTimeMillis()-play_time>=2*1000) {
			play_time = System.currentTimeMillis();
			soundPool.play(src, 1, 1, 0, 0, 1);
		}
	}
}